
///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class BooksSearchInfo {
/*
{
  "textSnippet": "The new chapter on computer graphics ensures that this book comprehensively covers the syllabi of most universities. The book also uses the Turbo C compiler, which is the most widely used C compiler."
}
*/

  String? textSnippet;

  BooksSearchInfo({
    this.textSnippet,
  });
  BooksSearchInfo.fromJson(Map<String, dynamic> json) {
    textSnippet = json['textSnippet']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['textSnippet'] = textSnippet;
    return data;
  }
}

class BooksAccessInfoPdf {
/*
{
  "isAvailable": true
}
*/

  bool? isAvailable;

  BooksAccessInfoPdf({
    this.isAvailable,
  });
  BooksAccessInfoPdf.fromJson(Map<String, dynamic> json) {
    isAvailable = json['isAvailable'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isAvailable'] = isAvailable;
    return data;
  }
}

class BooksAccessInfoEpub {
/*
{
  "isAvailable": false
}
*/

  bool? isAvailable;

  BooksAccessInfoEpub({
    this.isAvailable,
  });
  BooksAccessInfoEpub.fromJson(Map<String, dynamic> json) {
    isAvailable = json['isAvailable'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isAvailable'] = isAvailable;
    return data;
  }
}

class BooksAccessInfo {
/*
{
  "country": "EG",
  "viewability": "NO_PAGES",
  "embeddable": false,
  "publicDomain": false,
  "textToSpeechPermission": "ALLOWED",
  "epub": {
    "isAvailable": false
  },
  "pdf": {
    "isAvailable": true
  },
  "webReaderLink": "http://play.google.com/books/reader?id=0RXLCgAAQBAJ&hl=&source=gbs_api",
  "accessViewStatus": "NONE",
  "quoteSharingAllowed": false
}
*/

  String? country;
  String? viewability;
  bool? embeddable;
  bool? publicDomain;
  String? textToSpeechPermission;
  BooksAccessInfoEpub? epub;
  BooksAccessInfoPdf? pdf;
  String? webReaderLink;
  String? accessViewStatus;
  bool? quoteSharingAllowed;

  BooksAccessInfo({
    this.country,
    this.viewability,
    this.embeddable,
    this.publicDomain,
    this.textToSpeechPermission,
    this.epub,
    this.pdf,
    this.webReaderLink,
    this.accessViewStatus,
    this.quoteSharingAllowed,
  });
  BooksAccessInfo.fromJson(Map<String, dynamic> json) {
    country = json['country']?.toString();
    viewability = json['viewability']?.toString();
    embeddable = json['embeddable'];
    publicDomain = json['publicDomain'];
    textToSpeechPermission = json['textToSpeechPermission']?.toString();
    epub = (json['epub'] != null) ? BooksAccessInfoEpub.fromJson(json['epub']) : null;
    pdf = (json['pdf'] != null) ? BooksAccessInfoPdf.fromJson(json['pdf']) : null;
    webReaderLink = json['webReaderLink']?.toString();
    accessViewStatus = json['accessViewStatus']?.toString();
    quoteSharingAllowed = json['quoteSharingAllowed'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['country'] = country;
    data['viewability'] = viewability;
    data['embeddable'] = embeddable;
    data['publicDomain'] = publicDomain;
    data['textToSpeechPermission'] = textToSpeechPermission;
    if (epub != null) {
      data['epub'] = epub!.toJson();
    }
    if (pdf != null) {
      data['pdf'] = pdf!.toJson();
    }
    data['webReaderLink'] = webReaderLink;
    data['accessViewStatus'] = accessViewStatus;
    data['quoteSharingAllowed'] = quoteSharingAllowed;
    return data;
  }
}

class BooksSaleInfo {
/*
{
  "country": "EG",
  "saleability": "NOT_FOR_SALE",
  "isEbook": false
}
*/

  String? country;
  String? saleability;
  bool? isEbook;

  BooksSaleInfo({
    this.country,
    this.saleability,
    this.isEbook,
  });
  BooksSaleInfo.fromJson(Map<String, dynamic> json) {
    country = json['country']?.toString();
    saleability = json['saleability']?.toString();
    isEbook = json['isEbook'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['country'] = country;
    data['saleability'] = saleability;
    data['isEbook'] = isEbook;
    return data;
  }
}

class BooksVolumeInfoImageLinks {
/*
{
  "smallThumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=5&source=gbs_api",
  "thumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"
}
*/

  String? smallThumbnail;
  String? thumbnail;

  BooksVolumeInfoImageLinks({
    this.smallThumbnail,
    this.thumbnail,
  });
  BooksVolumeInfoImageLinks.fromJson(Map<String, dynamic> json) {
    smallThumbnail = json['smallThumbnail']?.toString();
    thumbnail = json['thumbnail']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['smallThumbnail'] = smallThumbnail;
    data['thumbnail'] = thumbnail;
    return data;
  }
}

class BooksVolumeInfoPanelizationSummary {
/*
{
  "containsEpubBubbles": false,
  "containsImageBubbles": false
}
*/

  bool? containsEpubBubbles;
  bool? containsImageBubbles;

  BooksVolumeInfoPanelizationSummary({
    this.containsEpubBubbles,
    this.containsImageBubbles,
  });
  BooksVolumeInfoPanelizationSummary.fromJson(Map<String, dynamic> json) {
    containsEpubBubbles = json['containsEpubBubbles'];
    containsImageBubbles = json['containsImageBubbles'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['containsEpubBubbles'] = containsEpubBubbles;
    data['containsImageBubbles'] = containsImageBubbles;
    return data;
  }
}

class BooksVolumeInfoReadingModes {
/*
{
  "text": false,
  "image": false
}
*/

  bool? text;
  bool? image;

  BooksVolumeInfoReadingModes({
    this.text,
    this.image,
  });
  BooksVolumeInfoReadingModes.fromJson(Map<String, dynamic> json) {
    text = json['text'];
    image = json['image'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['image'] = image;
    return data;
  }
}

class BooksVolumeInfoIndustryIdentifiers {
/*
{
  "type": "ISBN_13",
  "identifier": "9789332547179"
}
*/

  String? type;
  String? identifier;

  BooksVolumeInfoIndustryIdentifiers({
    this.type,
    this.identifier,
  });
  BooksVolumeInfoIndustryIdentifiers.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    identifier = json['identifier']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['identifier'] = identifier;
    return data;
  }
}

class BooksVolumeInfo {
/*
{
  "title": "Programming in C, 3e",
  "authors": [
    "Kamthane"
  ],
  "publisher": "Pearson Education India",
  "publishedDate": "2015",
  "description": "C is one of the most popular programming languages. It runs on most software platforms and computer architecture. This revised edition of our best-selling text Programming in C not only maintains the exclusivity of previous editions but also enhances it with the addition of new programs and illustrations. Challenging concepts are supported with numerous solved and unsolved programs. The new chapter on computer graphics ensures that this book comprehensively covers the syllabi of most universities. The book also uses the Turbo C compiler, which is the most widely used C compiler. With its increased coverage and inclusion of new learning tools, this edition is an invaluable asset for students who aim to improve their programming skills.",
  "industryIdentifiers": [
    {
      "type": "ISBN_13",
      "identifier": "9789332547179"
    }
  ],
  "readingModes": {
    "text": false,
    "image": false
  },
  "pageCount": 689,
  "printType": "BOOK",
  "categories": [
    "C (Computer program language)"
  ],
  "maturityRating": "NOT_MATURE",
  "allowAnonLogging": true,
  "contentVersion": "0.3.0.0.preview.0",
  "panelizationSummary": {
    "containsEpubBubbles": false,
    "containsImageBubbles": false
  },
  "imageLinks": {
    "smallThumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=5&source=gbs_api",
    "thumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"
  },
  "language": "en",
  "previewLink": "http://books.google.com.eg/books?id=0RXLCgAAQBAJ&dq=programming&hl=&cd=1&source=gbs_api",
  "infoLink": "http://books.google.com.eg/books?id=0RXLCgAAQBAJ&dq=programming&hl=&source=gbs_api",
  "canonicalVolumeLink": "https://books.google.com/books/about/Programming_in_C_3e.html?hl=&id=0RXLCgAAQBAJ"
}
*/

  String? title;
  List<String?>? authors;
  String? publisher;
  String? publishedDate;
  String? description;
  List<BooksVolumeInfoIndustryIdentifiers?>? industryIdentifiers;
  BooksVolumeInfoReadingModes? readingModes;
  int? pageCount;
  String? printType;
  List<String?>? categories;
  String? maturityRating;
  bool? allowAnonLogging;
  String? contentVersion;
  BooksVolumeInfoPanelizationSummary? panelizationSummary;
  BooksVolumeInfoImageLinks? imageLinks;
  String? language;
  String? previewLink;
  String? infoLink;
  String? canonicalVolumeLink;

  BooksVolumeInfo({
    this.title,
    this.authors,
    this.publisher,
    this.publishedDate,
    this.description,
    this.industryIdentifiers,
    this.readingModes,
    this.pageCount,
    this.printType,
    this.categories,
    this.maturityRating,
    this.allowAnonLogging,
    this.contentVersion,
    this.panelizationSummary,
    this.imageLinks,
    this.language,
    this.previewLink,
    this.infoLink,
    this.canonicalVolumeLink,
  });
  BooksVolumeInfo.fromJson(Map<String, dynamic> json) {
    title = json['title']?.toString();
    if (json['authors'] != null) {
      final v = json['authors'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      authors = arr0;
    }
    publisher = json['publisher']?.toString();
    publishedDate = json['publishedDate']?.toString();
    description = json['description']?.toString();
    if (json['industryIdentifiers'] != null) {
      final v = json['industryIdentifiers'];
      final arr0 = <BooksVolumeInfoIndustryIdentifiers>[];
      v.forEach((v) {
        arr0.add(BooksVolumeInfoIndustryIdentifiers.fromJson(v));
      });
      industryIdentifiers = arr0;
    }
    readingModes = (json['readingModes'] != null) ? BooksVolumeInfoReadingModes.fromJson(json['readingModes']) : null;
    pageCount = json['pageCount']?.toInt();
    printType = json['printType']?.toString();
    if (json['categories'] != null) {
      final v = json['categories'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      categories = arr0;
    }
    maturityRating = json['maturityRating']?.toString();
    allowAnonLogging = json['allowAnonLogging'];
    contentVersion = json['contentVersion']?.toString();
    panelizationSummary = (json['panelizationSummary'] != null) ? BooksVolumeInfoPanelizationSummary.fromJson(json['panelizationSummary']) : null;
    imageLinks = (json['imageLinks'] != null) ? BooksVolumeInfoImageLinks.fromJson(json['imageLinks']) : null;
    language = json['language']?.toString();
    previewLink = json['previewLink']?.toString();
    infoLink = json['infoLink']?.toString();
    canonicalVolumeLink = json['canonicalVolumeLink']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['title'] = title;
    if (authors != null) {
      final v = authors;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['authors'] = arr0;
    }
    data['publisher'] = publisher;
    data['publishedDate'] = publishedDate;
    data['description'] = description;
    if (industryIdentifiers != null) {
      final v = industryIdentifiers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['industryIdentifiers'] = arr0;
    }
    if (readingModes != null) {
      data['readingModes'] = readingModes!.toJson();
    }
    data['pageCount'] = pageCount;
    data['printType'] = printType;
    if (categories != null) {
      final v = categories;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['categories'] = arr0;
    }
    data['maturityRating'] = maturityRating;
    data['allowAnonLogging'] = allowAnonLogging;
    data['contentVersion'] = contentVersion;
    if (panelizationSummary != null) {
      data['panelizationSummary'] = panelizationSummary!.toJson();
    }
    if (imageLinks != null) {
      data['imageLinks'] = imageLinks!.toJson();
    }
    data['language'] = language;
    data['previewLink'] = previewLink;
    data['infoLink'] = infoLink;
    data['canonicalVolumeLink'] = canonicalVolumeLink;
    return data;
  }
}

class Books {
/*
{
  "kind": "books#volume",
  "id": "0RXLCgAAQBAJ",
  "etag": "fEqBhcoUmjU",
  "selfLink": "https://www.googleapis.com/books/v1/volumes/0RXLCgAAQBAJ",
  "volumeInfo": {
    "title": "Programming in C, 3e",
    "authors": [
      "Kamthane"
    ],
    "publisher": "Pearson Education India",
    "publishedDate": "2015",
    "description": "C is one of the most popular programming languages. It runs on most software platforms and computer architecture. This revised edition of our best-selling text Programming in C not only maintains the exclusivity of previous editions but also enhances it with the addition of new programs and illustrations. Challenging concepts are supported with numerous solved and unsolved programs. The new chapter on computer graphics ensures that this book comprehensively covers the syllabi of most universities. The book also uses the Turbo C compiler, which is the most widely used C compiler. With its increased coverage and inclusion of new learning tools, this edition is an invaluable asset for students who aim to improve their programming skills.",
    "industryIdentifiers": [
      {
        "type": "ISBN_13",
        "identifier": "9789332547179"
      }
    ],
    "readingModes": {
      "text": false,
      "image": false
    },
    "pageCount": 689,
    "printType": "BOOK",
    "categories": [
      "C (Computer program language)"
    ],
    "maturityRating": "NOT_MATURE",
    "allowAnonLogging": true,
    "contentVersion": "0.3.0.0.preview.0",
    "panelizationSummary": {
      "containsEpubBubbles": false,
      "containsImageBubbles": false
    },
    "imageLinks": {
      "smallThumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=5&source=gbs_api",
      "thumbnail": "http://books.google.com/books/content?id=0RXLCgAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"
    },
    "language": "en",
    "previewLink": "http://books.google.com.eg/books?id=0RXLCgAAQBAJ&dq=programming&hl=&cd=1&source=gbs_api",
    "infoLink": "http://books.google.com.eg/books?id=0RXLCgAAQBAJ&dq=programming&hl=&source=gbs_api",
    "canonicalVolumeLink": "https://books.google.com/books/about/Programming_in_C_3e.html?hl=&id=0RXLCgAAQBAJ"
  },
  "saleInfo": {
    "country": "EG",
    "saleability": "NOT_FOR_SALE",
    "isEbook": false
  },
  "accessInfo": {
    "country": "EG",
    "viewability": "NO_PAGES",
    "embeddable": false,
    "publicDomain": false,
    "textToSpeechPermission": "ALLOWED",
    "epub": {
      "isAvailable": false
    },
    "pdf": {
      "isAvailable": true
    },
    "webReaderLink": "http://play.google.com/books/reader?id=0RXLCgAAQBAJ&hl=&source=gbs_api",
    "accessViewStatus": "NONE",
    "quoteSharingAllowed": false
  },
  "searchInfo": {
    "textSnippet": "The new chapter on computer graphics ensures that this book comprehensively covers the syllabi of most universities. The book also uses the Turbo C compiler, which is the most widely used C compiler."
  }
}
*/

  String? kind;
  String? id;
  String? etag;
  String? selfLink;
  BooksVolumeInfo? volumeInfo;
  BooksSaleInfo? saleInfo;
  BooksAccessInfo? accessInfo;
  BooksSearchInfo? searchInfo;

  Books({
    this.kind,
    this.id,
    this.etag,
    this.selfLink,
    this.volumeInfo,
    this.saleInfo,
    this.accessInfo,
    this.searchInfo,
  });
  Books.fromJson(Map<String, dynamic> json) {
    kind = json['kind']?.toString();
    id = json['id']?.toString();
    etag = json['etag']?.toString();
    selfLink = json['selfLink']?.toString();
    volumeInfo = (json['volumeInfo'] != null) ? BooksVolumeInfo.fromJson(json['volumeInfo']) : null;
    saleInfo = (json['saleInfo'] != null) ? BooksSaleInfo.fromJson(json['saleInfo']) : null;
    accessInfo = (json['accessInfo'] != null) ? BooksAccessInfo.fromJson(json['accessInfo']) : null;
    searchInfo = (json['searchInfo'] != null) ? BooksSearchInfo.fromJson(json['searchInfo']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['kind'] = kind;
    data['id'] = id;
    data['etag'] = etag;
    data['selfLink'] = selfLink;
    if (volumeInfo != null) {
      data['volumeInfo'] = volumeInfo!.toJson();
    }
    if (saleInfo != null) {
      data['saleInfo'] = saleInfo!.toJson();
    }
    if (accessInfo != null) {
      data['accessInfo'] = accessInfo!.toJson();
    }
    if (searchInfo != null) {
      data['searchInfo'] = searchInfo!.toJson();
    }
    return data;
  }
}
